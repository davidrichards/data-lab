#AUTOGENERATED! DO NOT EDIT! File to edit: dev/03_loop.ipynb (unless otherwise specified).

__all__ = ['artifact_storage', 'generic_runner', 'runner', 'train_loop', 'content_from_url', 'white_list',
           'dataframe_from_url', 'values_from_url', 'k_fold', 'process_model', 'store', 'plot_results', 'cheap_loop']

#Cell
def artifact_storage(*a, **kw):
    """Infer how the user intends to store
    artifacts: models, versions, treatments,
    and evaluation results."""

    def noop(subject, treatment, model, result): pass
    return noop

def generic_runner(subject, treatment, *a, **kw):
    """Naive concept. I have something smarter
    running somewhere, but I'm not sure where it is."""
    storage = artifact_storage(*a, **kw)
    model = None
    result = treatment(subject)
    return storage(subject, treatment, model, result)

def runner(*a, **kw):
    """Infer the runner and its artifact storage."""
    return generic_runner

def train_loop(subjects, treatments, *a, **kw):
    """The main training loop."""

    fn = runner(*a, **kw)

    for subject in np.array(subjects):
        for treatment in np.array(treatments):
            fn(subject, treatment, *a, **kw)

#Cell
def content_from_url(url, decode='utf-8', certs=None, **kw):
    """Use requests to fetch content from a url"""
    kw = {}
    if not certs is None: kw['certs'] = certs
    s = requests.get(url, **kw).content
    if decode is False: return s
    return s.decode(decode)

def white_list(keywords, keys, require_keys=False):
    """Filter a dictionary by a set of keys"""
    if require_keys:
        return {key:keywords[key] for key in keys}
    return {key:keywords.get(key) for key in keys}

def dataframe_from_url(url, **kw):
    """Safely get data, decode it, use certs, and
    create a Pandas DataFrame from the content."""
    content = content_from_url(url, **kw)
    kw = white_list(kw, ['names'])
    return pd.read_csv(io.StringIO(content), **kw)

def values_from_url(url, **kw):
    """Safely get values from a dataframe."""
    df = dataframe_from_url(url, **kw)
    return df.values

def k_fold(**kw):
    """Use scikit-learn's KFold with some control
    on reasonable defaults."""
    defaults = {'n_splits': 10}
    kw = {**defaults, **kw}
    return model_selection.KFold(**kw)

def process_model(name, model, X, Y, storage={}, scoring='accuracy', **kw):
    """Process a model using K-Fold cross validation."""
    kfold = k_fold()
    result = model_selection.cross_val_score(
        model, X, Y,
        cv=kfold, scoring=scoring
    )
    store(name, result, storage=storage)

def store(name, result, storage={}):
    """Simple storage of treatment results."""
    storage[name] = result

def plot_results(results, plot=None, title='Algorithm Comparison', **kw):
    """Create a box plot for each treatment in a results dictionary."""
    if plot is None: plot = plt

    fig = plot.figure()
    fig.suptitle(title)
    ax = fig.add_subplot(111)
    plt.boxplot(list(results.values()))
    ax.set_xticklabels(list(results.keys()))
    plot.show()

def cheap_loop(treatments, subjects, display=True, **kw):
    """Create models without hyperparameter fine tuning
    to determine which algorithms show promise on a particular
    dataset"""
    storage = {}
    for (name, model) in treatments:
        for (x, y) in subjects:
            process_model(name, model(), x, y, storage=storage)
    if display: plot_results(storage, **kw)
    return storage