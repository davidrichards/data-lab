# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/01_validate.ipynb (unless otherwise specified).

__all__ = ['is_traditional_distribution', 'extract_values', 'extract_test_values', 'DEFAULT_VALIDATION_SIZE', 'plot_qq',
           'ideal_normal', 'plot_ditribution_vs_normal', 'validate_with_shapiro_wilk', 'validate_distribution']

# Cell
from lab.imports import *

# Cell
DEFAULT_VALIDATION_SIZE = 1000

def is_traditional_distribution(o):
    """A 'traditional' distribution has an `rvs`
    method attached, a tool for extracting random
    variables. Check if this is the case."""
    return hasattr(o, 'rvs')

def extract_values(o, *a, **kw):
    """Create a simple interface for either
    a distribution (e.g. `o.rvs(**kw)`) or a
    function (`o(**kw)`, or just an array-like
    object. (`np.array(o)`)."""
    if is_traditional_distribution(o): return np.array(o.rvs(*a, **kw))
    if callable(o): return np.array(o(*a, **kw))
    return np.array(o)

def extract_test_values(o, *a, **kw):
    """Offer test-sized values"""
    kw = {**{'size': DEFAULT_VALIDATION_SIZE}, **kw}
    return extract_values(o, *a, **kw)

# Cell
def plot_qq(o,
            *a,
            plot=None,
            display=True,
            alpha=0.2,
            **kw
           ):
    """Show how a distribution deviates from
    normal (scatter vs the line)"""

    if plot is None: plot = plt

    fig, ax = plot.subplots()
    x = extract_test_values(o, *a, **kw)
    res = stats.probplot(x, plot=plot)
    scatter, line = ax.get_lines()

    scatter.set_alpha(alpha / 4)
    scatter.set_marker('o')

    line.set_linewidth(4)
    line.set_alpha(alpha)

    fig.tight_layout()
    if display: plot.show()

# Cell
def ideal_normal(o, bins, *a, **kw):
    """Create a plotable sequence that expresses
    the ideal normal probability distribution across
    a set of bins."""
    x = extract_test_values(o, *a, **kw)
    mu, sigma = np.mean(x), np.std(x)

    y = ((1 / (np.sqrt(2 * np.pi) * sigma)) *
         np.exp(-0.5 * (1 / sigma * (bins - mu))**2))

    return y

def plot_ditribution_vs_normal(o,
                               *a,
                               title='Distribution vs Normal',
                               num_bins=50,
                               **kw
                              ):
    """Show the difference between a distribution
    and an ideal normal distribution."""

    x = extract_test_values(o, *a, **kw)

    fig, ax = plt.subplots()

    _n, bins, _patches = ax.hist(x, num_bins, density=1, alpha=0.2)

    y = ideal_normal(x, bins)
    ax.plot(bins, y, '-')

    ax.set_ylabel('Probability Density')
    ax.set_yticks([], [])
    ax.set_title(title)
    fig.tight_layout()

    plt.show()

# Cell
def validate_with_shapiro_wilk(o, *a, accept=0.05, **kw):
    """Validate with the Shapiro-Wilk test..."""
    x = extract_test_values(o, *a, **kw)
    _w, p = stats.shapiro(x)
    return p >= accept

def validate_distribution(o, validator=validate_with_shapiro_wilk, **kw):
    """Validate a distribution generally, using Shapiro-Wilk as
    a default validation."""
    return validator(o, **kw)